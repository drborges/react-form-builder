import React from "react";
import { get } from "lodash";
import { v4 as uuid } from "uuid";
import { Field, FieldArray } from "formik";

const QuestionOptions = ({ name }) => {
  return (
    <FieldArray
      name={name}
      render={({ name, push, form, remove }) => {
        const options = get(form.values, name, []);
        return (
          <ul className="options">
            <button onClick={() => push({ key: uuid() })}>Add Option</button>
            {/* it is not safe to use the interation index as key in this case because
              we can remove option items, which means items could share the same key in
              between rendering cycles when removing elements from the array.
              Instead, we try to reuse the actual option.id and when that is not available
              fallback to option.key which is generated by the add option action.
            */}
            {options.map((option, i) => (
              <li key={option.id || option.key}>
                <div>
                  <Field name={`${name}.${i}.text`} />
                  <button onClick={() => remove(i)}>Remove</button>
                </div>
              </li>
            ))}
          </ul>
        );
      }}
    />
  );
};

export default QuestionOptions;
